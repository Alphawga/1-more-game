generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  name            String?
  emailVerified   Boolean   @default(false)
  verificationToken String?
  resetPasswordToken String?
  resetPasswordExpires DateTime?
  
  // Profile Information
  avatar          String?
  phoneNumber     String?
  country         String?
  language        String    @default("en")
  
  // Gaming Preferences
  gamePreferences GamePreference[]
  platformPreferences PlatformPreference[]
  
  // Loyalty & Rewards
  loyaltyPoints   Int       @default(0)
  referralCode    String?   @unique
  referredBy      String?
  
  // Authentication
  lastLogin       DateTime?
  failedAttempts  Int       @default(0)
  lockedUntil     DateTime?
  
  // Roles and Permissions
  role            Role      @default(USER)
  permissions     Permission[]
  
  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  orders          Order[]
  reviews         Review[]
  notifications   Notification[]
  sessions        Session[]
}

model GamePreference {
  id        String   @id @default(cuid())
  gameId    String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, gameId])
}

model PlatformPreference {
  id         String   @id @default(cuid())
  platformId String
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, platformId])
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  device    String?
  ip        String?
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  status      OrderStatus
  total       Float
  items       OrderItem[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id])
  productId   String
  quantity    Int
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Review {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  productId   String
  rating      Int
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  type        NotificationType
  title       String
  message     String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
  SUPPORT
  MODERATOR
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum NotificationType {
  ORDER
  SYSTEM
  PROMOTION
  SECURITY
  PAYMENT
} 